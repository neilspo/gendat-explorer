///
/// \class gdw_panel gdw_panel.h
///
/// \brief Provides ...
///
/// This class handles ...
/// 

#include <wx/wxprec.h>

#ifndef WX_PRECOMP
#include <wx/wx.h>
#endif

#include <wx/treectrl.h>

#include <string>
#include "gdw_panel.h"



////////////////////////////////////////////////////////////////////////////////////////////////////
///
/// \brief Constructor
///
/// The constructor ...
///
////////////////////////////////////////////////////////////////////////////////////////////////////



gdw_panel::gdw_panel(wxWindow *parent) : wxPanel(parent)
{
        std::cout << "gdw_panel Constructor: Start" << std::endl;

        CallAfter (&gdw_panel::delayed_start);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
///
/// \brief Run derived class startup method
///
/// The member function ...
///
////////////////////////////////////////////////////////////////////////////////////////////////////


void gdw_panel::delayed_start()
{
        try
        {
                process_window_draw();
        }
	catch (std::runtime_error& exception)
	{
                // A runtime error has occurred. Report the error message in a popup window
                // (a modal dialogue), but it should be safe to carry on.
                
                wxString error_msg = exception.what();
                wxMessageDialog* msg_dia = new wxMessageDialog(NULL, error_msg, "Runtime Error");
                msg_dia->ShowModal();
                
	}
	catch (std::logic_error& exception)
	{
                // A program logic error has occurred. Report the error message in a popup window
                // (a modal dialogue).
                
                wxString error_msg = exception.what();
                wxMessageDialog* msg_dia = new wxMessageDialog(NULL, error_msg, "Program Logic Error");
                msg_dia->ShowModal();

                // After the user closes the error window, safely close out the program.

                wxApp*    my_wxApp = wxTheApp;
                wxWindow* my_TopWindow = my_wxApp->GetTopWindow();
                my_TopWindow->Close();
	}
}





gdw_panel::~gdw_panel()
{
        std::cout << "gdw_panel Destructor Start" << std::endl;
}


////////////////////////////////////////////////////////////////////////////////////////////////////
///
/// \brief Event handler
///
/// This member function handles all of the wxWidgets events that are generated by TopFrame.
///
////////////////////////////////////////////////////////////////////////////////////////////////////


void gdw_panel::event_handler (wxCommandEvent& event)
{
        std::cout << "TopFrame::event_handler: Start" << std::endl;

        int event_id = event.GetId();

}
